## 2. Master Functions
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
## 3. Register API Key to be used (if needed)
census_api_key('bf2d507651b5a621dbadd44533fb4f3deaab26bf', overwrite = TRUE)
## 4. Invoke color palettes to be used
palette <- c('#feedde', '#fdbe85', '#fd8d3c', '#e6550d', '#a63603')
palettea <- c("#EA526F","#E76B74","#D7AF70","#937D64","#585B56")
paletteb <- c("#f7b267", "#f79d65", "#f4845f", "#f27059", "#f25c54")
palettec <- c("#fde725","#5ec962","#21918c","#3b528b","#440154")
paletted <- c("#ffd700","#ffb14e","#ea5f94","#9d02d7","#0000ff")
palettee <- c('#d7191c','#fdae61','#ffffbf','#abd9e9','#2c7bb6')
palettef <- c("#981FAC","#CB0F8B","#FF006A","#FE4C35","#FE9900")
paletteg <- c("#981FAC","#FF006A","#FE4C35","#FE9900")
paletteh <- c("#981FAC","#FF006A")
# Functions
## 1. Theme Functions
mapTheme <- function(base_size = 12) {
theme(
text = element_text( color = "black"),
plot.title = element_text(size = 15,colour = "black"),
plot.subtitle=element_text(face="italic"),
plot.caption=element_text(hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),axis.title = element_blank(),
axis.text = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=2),
strip.text.x = element_text(size = 14))
}
plotTheme <- function(base_size = 12) {
theme(
text = element_text( color = "black"),
plot.title = element_text(color = "darkred", size=15, face="bold"),
plot.subtitle = element_text(face="italic"),
plot.caption = element_text(hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_line("grey80", size = 0.1),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=2),
strip.background = element_rect(fill = "grey80", color = "white"),
strip.text = element_text(size=12),
axis.title = element_text(size=12),
axis.text = element_text(size=10),
plot.background = element_blank(),
legend.background = element_blank(),
legend.title = element_text(colour = "black", face = "italic"),
legend.text = element_text(colour = "black", face = "italic"),
strip.text.x = element_text(size = 14)
)
}
## 2. Load Quantile break functions
qBr <- function(df, variable, rnd) {
if (missing(rnd)) {
as.character(quantile(round(df[[variable]],0),
c(.01,.2,.4,.6,.8), na.rm=T))
} else if (rnd == FALSE | rnd == F) {
as.character(formatC(quantile(df[[variable]]), digits = 3),
c(.01,.2,.4,.6,.8), na.rm=T)
}
}
q5 <- function(variable) {as.factor(ntile(variable, 5))}
## 3. Nearest neighbor distance function
nn_function <- function(measureFrom,measureTo,k) {
measureFrom_Matrix <- as.matrix(measureFrom)
measureTo_Matrix <- as.matrix(measureTo)
nn <-
get.knnx(measureTo, measureFrom, k)$nn.dist
output <-
as.data.frame(nn) %>%
rownames_to_column(var = "thisPoint") %>%
gather(points, point_distance, V1:ncol(.)) %>%
arrange(as.numeric(thisPoint)) %>%
group_by(thisPoint) %>%
dplyr::summarize(pointDistance = mean(point_distance)) %>%
arrange(as.numeric(thisPoint)) %>%
dplyr::select(-thisPoint) %>%
pull()
return(output)
}
# Base Data
## 1. Philadelphia New Construction Permits
constructionPermits <-
st_read("https://phl.carto.com/api/v2/sql?q=SELECT+*+FROM+permits+WHERE+permitissuedate+>=+'2013-01-01'+AND+permitissuedate+<+'2022-12-31'AND+permitdescription+=+'NEW+CONSTRUCTION+PERMIT'&filename=permits&format=geojson&skipfields=cartodb_id") %>%
st_transform('ESRI:102728')%>%
mutate(Legend = "Building Construction")
### 1.1. 2022 Philadelphia New Construction Permits
constructionPermits_2022 <-
st_read("https://phl.carto.com/api/v2/sql?q=SELECT+*+FROM+permits+WHERE+permitissuedate+>=+'2022-01-01'+AND+permitissuedate+<+'2022-12-31'AND+permitdescription+=+'NEW+CONSTRUCTION+PERMIT'&filename=permits&format=geojson&skipfields=cartodb_id") %>%
st_transform('ESRI:102728')%>%
mutate(Legend = "Building Construction")
## 2. Philadelphia Demolition Permits
demolitionPermits <-
st_read("https://phl.carto.com/api/v2/sql?q=SELECT+*+FROM+permits+WHERE+permitissuedate+>=+'2013-01-01'+AND+permitissuedate+<+'2022-12-31'AND+permitdescription+=+'DEMOLITION+PERMIT'&filename=permits&format=geojson&skipfields=cartodb_id") %>%
st_transform('ESRI:102728')%>%
mutate(Legend = "Building Demolition")
### 2.1 2022 Philadelphia Demolition Permits
demolitionPermits_2022 <-
st_read("https://phl.carto.com/api/v2/sql?q=SELECT+*+FROM+permits+WHERE+permitissuedate+>=+'2022-01-01'+AND+permitissuedate+<+'2022-12-31'AND+permitdescription+=+'DEMOLITION+PERMIT'&filename=permits&format=geojson&skipfields=cartodb_id") %>%
st_transform('ESRI:102728')%>%
mutate(Legend = "Building Demolition")
## 3. Philadelphia Construction and Demolition Permits
phillyPermits <-
st_read("https://phl.carto.com/api/v2/sql?q=SELECT+*+FROM+permits+WHERE+permitissuedate+>=+'2013-01-01'+AND+permitissuedate+<+'2022-12-31'&filename=permits&format=geojson&skipfields=cartodb_id") %>%
filter(permitdescription == 'NEW CONSTRUCTION PERMIT' | permitdescription == 'DEMOLITION PERMIT') %>%
st_transform('ESRI:102728')%>%
mutate(Legend = "Construction and Demolition")
## 4. Philadelphia Boundaries
phillyBoundary <-
st_read("http://data.phl.opendata.arcgis.com/datasets/405ec3da942d4e20869d4e1449a2be48_0.geojson") %>%
st_transform('ESRI:102728')
### 4.1. Fishnet Grid Based on Philadelphia Boundaries
phillyFishnet <-
st_make_grid(phillyBoundary,
cellsize = 500,
square = TRUE) %>%
.[phillyBoundary] %>%
st_sf() %>%
mutate(uniqueID = rownames(.))
## 5. Philadelphia Neighborhoods
phillyNeighborhoods <-
st_read("https://raw.githubusercontent.com/azavea/geo-data/master/Neighborhoods_Philadelphia/Neighborhoods_Philadelphia.geojson") %>%
st_transform('ESRI:102728') %>%
st_transform(st_crs(phillyFishnet))
## 6. Vacant Property
vacantLand <-
st_read('https://opendata.arcgis.com/datasets/19c35fb02d544a9bad0032b58268c9f9_0.geojson') %>%
na.omit() %>%
st_transform('ESRI:102728') %>%
st_transform(st_crs(phillyFishnet)) %>%
mutate(Legend = "Vacant Land")
vacantBuildings <-
st_read('https://opendata.arcgis.com/datasets/f7ed68293c5e40d58f1de9c8435c3e84_0.geojson') %>%
na.omit() %>%
st_transform('ESRI:102728') %>%
st_transform(st_crs(phillyFishnet)) %>%
mutate(Legend = "Vacant Buildings")
## 7. Affordable Housing
affordableHousing <-
st_read('https://opendata.arcgis.com/datasets/ca8944190b604b2aae7eff17c8dd9ef5_0.geojson') %>%
filter(FISCAL_YEAR_COMPLETE <= "2022" && FISCAL_YEAR_COMPLETE >= "2012") %>%
st_transform('ESRI:102728') %>%
st_transform(st_crs(phillyFishnet)) %>%
mutate(Legend = "Affordable Housing")
## 8. Census data - ACS 2021
tracts21 <-
get_acs(geography = "tract", variables = c("B01003_001E","B02001_002E","B02001_003E","B19013_001E","B25002_001E","B06012_002E","B27011_008E"),
year=2021, state=42, county=101, geometry=T, output="wide") %>%
st_transform('ESRI:102728') %>%
rename(TotalPop = B01003_001E,
RaceWhite = B02001_002E,
RaceBlack = B02001_003E,
MedHHInc = B19013_001E,
TotalUnit = B25002_001E,
TotalPoverty = B06012_002E,
TotalUnemployment =    B27011_008E) %>%
dplyr::select(-NAME, -starts_with("B")) %>% #-starts_with("B") awesome!
mutate(pctWhite = ifelse(TotalPop > 0, RaceWhite / TotalPop * 100,0),
pctBlack = ifelse(TotalPop > 0, RaceBlack / TotalPop * 100,0),
pctPoverty = ifelse(TotalPop > 0, TotalPoverty / TotalPop *100, 0),
pctUnemploy = ifelse(TotalPop > 0, TotalUnemployment / TotalPop *100, 0)
) %>%
dplyr::select(-RaceWhite, -RaceBlack, -TotalPoverty ,-TotalUnemployment,-GEOID) %>%
st_transform(st_crs(phillyFishnet))
tracts21.MedHHInc <- tracts21 %>%
dplyr::select(MedHHInc) %>%
rename(Legend = MedHHInc)
tracts21.pctWhite <- tracts21 %>%
dplyr::select(pctWhite)%>%
rename(Legend = pctWhite)
tracts21.pctBlack <- tracts21 %>%
dplyr::select(pctBlack)%>%
rename(Legend = pctBlack)
tracts21.pctPoverty <- tracts21 %>%
dplyr::select(pctPoverty)%>%
rename(Legend = pctPoverty)
tracts21.pctUnemploy <- tracts21 %>%
dplyr::select(pctUnemploy)%>%
rename(Legend = pctUnemploy)
# Mapping Permits
## 1. A map of new construction permits issued in 2022, Philadelphia
grid.arrange(ncol=2,
ggplot() +
geom_sf(data = phillyBoundary) +
geom_sf(data = constructionPermits, colour="darkred", size=0.5, show.legend = "point") +
labs(title= "New Construction Permits Issued, 2022",
subtitle = 'Philadelphia, PA\n',
caption = 'Figure 1.1') +
mapTheme() +
plotTheme(),
ggplot() +
geom_sf(data = phillyBoundary, fill = "#E5E5E5") +
stat_density2d(data = data.frame(st_coordinates(constructionPermits)),
aes(X, Y, fill = ..level.., alpha = ..level..),
size = 0.01, bins = 40, geom = 'polygon') +
scale_fill_viridis_c(option = "plasma") +
scale_alpha(range = c(0.00, 0.35), guide = FALSE) +
labs(title = "Density of Construction Permits, 2022",
subtitle = 'Philadelphia, PA\n',
caption = 'Figure 1.2') +
mapTheme() +
theme(legend.position = "none") +
plotTheme())
## 2. A map of demolition permits issued in 2022, Philadelphia
grid.arrange(ncol=2,
ggplot() +
geom_sf(data = phillyBoundary) +
geom_sf(data = demolitionPermits, colour="darkred", size=0.5, show.legend = "point") +
labs(title= "Demolition Permits Issued, 2022",
subtitle = 'Philadelphia, PA\n',
caption = 'Figure 2.1') +
mapTheme() +
plotTheme(),
ggplot() +
geom_sf(data = phillyBoundary, fill = "#E5E5E5") +
stat_density2d(data = data.frame(st_coordinates(demolitionPermits)),
aes(X, Y, fill = ..level.., alpha = ..level..),
size = 0.01, bins = 40, geom = 'polygon') +
scale_fill_viridis_c(option = "plasma") +
scale_alpha(range = c(0.00, 0.35), guide = FALSE) +
labs(title = "Density of Demolition Permits, 2022",
subtitle = 'Philadelphia, PA\n',
caption = 'Figure 2.2') +
mapTheme() +
theme(legend.position = "none") +
plotTheme())
# Mapping Permits in Fishnet
## 1. New construction permits joined to Fishnet, 2022
constructionPermits <- st_transform(constructionPermits, st_crs(phillyFishnet))
construction_net <-
dplyr::select(constructionPermits) %>%
mutate(countCPermits = 1) %>%
aggregate(., phillyFishnet, sum) %>%
mutate(countCPermits = replace_na(countCPermits, 0),
uniqueID = rownames(.),
cvID = sample(round(nrow(phillyFishnet) / 24),
size=nrow(phillyFishnet), replace = TRUE))
ggplot() +
geom_sf(data = construction_net, aes(fill = countCPermits), color = NA) +
scale_fill_viridis_c(option = "plasma",
name = 'Construction Counts') +
labs(title = "New construction permits Joined to Fishnet, 2022",
subtitle = 'Philadelphia, PA\n',
caption = 'Figure 3') +
mapTheme() +
plotTheme()
## 2. New demolition permits joined to Fishnet, 2022
demolitionPermits <- st_transform(demolitionPermits, st_crs(phillyFishnet))
demolition_net <-
dplyr::select(demolitionPermits) %>%
mutate(countDPermits = 1) %>%
aggregate(., phillyFishnet, sum) %>%
mutate(countDPermits = replace_na(countDPermits, 0),
uniqueID = rownames(.),
cvID = sample(round(nrow(phillyFishnet) / 24),
size=nrow(phillyFishnet), replace = TRUE))
ggplot() +
geom_sf(data = demolition_net, aes(fill = countDPermits), color = NA) +
scale_fill_viridis_c(option = "plasma",
name = 'Demolition Counts') +
labs(title = "New demolition permits Joined to Fishnet, 2022",
subtitle = 'Philadelphia, PA\n',
caption = 'Figure 4') +
mapTheme() +
plotTheme()
# Map Set of Fishnet Factors
# All variables in fishnet
vars_net <-
rbind(affordableHousing, vacantBuildings,
vacantLand) %>%
st_join(., phillyFishnet, join=st_within) %>%
st_drop_geometry() %>%
group_by(uniqueID, Legend) %>%
summarize(count = n()) %>%
full_join(phillyFishnet, by = "uniqueID") %>%
spread(Legend, count, fill=0) %>%
st_sf() %>%
na.omit() %>%
dplyr::select(-`<NA>`) %>%
ungroup()
# Map Set of Fishnet Factors
affordableHousing <- affordableHousing %>%
dplyr::select(geometry, Legend)
vacantBuildings <- vacantBuildings %>%
dplyr::select(geometry, Legend)
vacantLand <- vacantLand %>%
dplyr::select(geometry, Legend)
# All variables in fishnet
vars_net <-
rbind(affordableHousing, vacantBuildings,
vacantLand) %>%
st_join(., phillyFishnet, join=st_within) %>%
st_drop_geometry() %>%
group_by(uniqueID, Legend) %>%
summarize(count = n()) %>%
full_join(phillyFishnet, by = "uniqueID") %>%
spread(Legend, count, fill=0) %>%
st_sf() %>%
na.omit() %>%
dplyr::select(-`<NA>`) %>%
ungroup()
### Multiple map for feature counts in fishnet
vars_net.long <-
gather(vars_net, Variable, value, -geometry, -uniqueID)
vars <- unique(vars_net.long$Variable)
mapList <- list()
for(i in vars){
mapList[[i]] <-
ggplot() +
geom_sf(data = filter(vars_net.long, Variable == i), aes(fill=value), colour=NA) +
scale_fill_viridis_c(option = "plasma",
name = " ") +
labs(title=i) +
mapTheme()}
do.call(grid.arrange,c(mapList, ncol =3, top = "Figure. 5.1 Influencing Factors by Fishnet\n"))
# Map Set of Fishnet Factors
affordableHousing <- affordableHousing %>%
dplyr::select(geometry, Legend)
vacantBuildings <- vacantBuildings %>%
dplyr::select(geometry, Legend)
vacantLand <- vacantLand %>%
dplyr::select(geometry, Legend)
# All variables in fishnet
vars_net <-
rbind(affordableHousing, vacantBuildings,
vacantLand) %>%
st_join(., phillyFishnet, join=st_within) %>%
st_drop_geometry() %>%
group_by(uniqueID, Legend) %>%
summarize(count = n()) %>%
full_join(phillyFishnet, by = "uniqueID") %>%
spread(Legend, count, fill=0) %>%
st_sf() %>%
na.omit() %>%
dplyr::select(-`<NA>`) %>%
ungroup()
### Multiple map for feature counts in fishnet
vars_net.long <-
gather(vars_net, Variable, value, -geometry, -uniqueID)
vars <- unique(vars_net.long$Variable)
mapList <- list()
for(i in vars){
mapList[[i]] <-
ggplot() +
geom_sf(data = filter(vars_net.long, Variable == i), aes(fill=value), colour=NA) +
scale_fill_viridis_c(option = "plasma",
name = " ") +
labs(title=i) +
mapTheme()}
do.call(grid.arrange,c(mapList, ncol =3, top = "Figure. 5.1 Influencing Factors by Fishnet\n"))
# Map Set of Fishnet Factors
affordableHousing <- affordableHousing %>%
dplyr::select(geometry, Legend)
vacantBuildings <- vacantBuildings %>%
dplyr::select(geometry, Legend)
vacantLand <- vacantLand %>%
dplyr::select(geometry, Legend)
# All variables in fishnet
vars_net <-
rbind(affordableHousing, vacantBuildings,
vacantLand) %>%
st_join(., phillyFishnet, join=st_within) %>%
st_drop_geometry() %>%
group_by(uniqueID, Legend) %>%
summarize(count = n()) %>%
full_join(phillyFishnet, by = "uniqueID") %>%
spread(Legend, count, fill=0) %>%
st_sf() %>%
na.omit() %>%
dplyr::select(-`<NA>`) %>%
ungroup()
### Multiple map for feature counts in fishnet
vars_net.long <-
gather(vars_net, Variable, value, -geometry, -uniqueID)
vars <- unique(vars_net.long$Variable)
mapList <- list()
for(i in vars){
mapList[[i]] <-
ggplot() +
geom_sf(data = filter(vars_net.long, Variable == i), aes(fill=value), colour=NA) +
scale_fill_viridis() +
labs(title=i) +
mapTheme()}
do.call(grid.arrange,c(mapList, ncol =3, top = "Figure. 5.1 Influencing Factors by Fishnet\n"))
# Map Set of Fishnet Factors
affordableHousing <- affordableHousing %>%
dplyr::select(geometry, Legend)
vacantBuildings <- vacantBuildings %>%
dplyr::select(geometry, Legend)
vacantLand <- vacantLand %>%
dplyr::select(geometry, Legend)
# All variables in fishnet
vars_net <-
rbind(affordableHousing, vacantBuildings,
vacantLand) %>%
st_join(., phillyFishnet, join=st_within) %>%
st_drop_geometry() %>%
group_by(uniqueID, Legend) %>%
summarize(count = n()) %>%
full_join(phillyFishnet, by = "uniqueID") %>%
spread(Legend, count, fill=0) %>%
st_sf() %>%
na.omit() %>%
dplyr::select(-`<NA>`) %>%
ungroup()
### Multiple map for feature counts in fishnet
vars_net.long <-
gather(vars_net, Variable, value, -geometry, -uniqueID)
vars <- unique(vars_net.long$Variable)
mapList <- list()
for(i in vars){
mapList[[i]] <-
ggplot() +
geom_sf(data = filter(vars_net.long, Variable == i), aes(fill=value), colour=NA) +
scale_fill_viridis(option = "plasma",
name = " ") +
labs(title=i) +
mapTheme()}
do.call(grid.arrange,c(mapList, ncol =3, top = "Figure. 5.1 Influencing Factors by Fishnet\n"))
# Knitting Parameters
knitr::opts_chunk$set(
echo = TRUE,
warning = FALSE,
message = FALSE,
out.width = '100%',
fig.retina =3
)
# Set Up
## 1. load Libraries
library(sf)
library(tidyverse)
library(mapview) #namespace ‘htmltools’ 0.5.3 is already loaded, but >= 0.5.4 is required
# Set Up
## 1. load Libraries
update.packages(ask = FALSE, checkBuilt = TRUE)
# Knitting Parameters
knitr::opts_chunk$set(
echo = TRUE,
warning = FALSE,
message = FALSE,
out.width = '100%',
fig.retina =3
)
# Set Up
## 1. load Libraries
library(sf)
library(tidyverse)
library(mapview) #namespace ‘htmltools’ 0.5.3 is already loaded, but >= 0.5.4 is required
# Set Up
## 1. load Libraries
library(sf)
library(tidyverse)
library(htmltools)
library(mapview) #namespace ‘htmltools’ 0.5.3 is already loaded, but >= 0.5.4 is required
# Set Up
## 1. load Libraries
install.packages("htmltools", dependencies=TRUE)
library(sf)
library(tidyverse)
library(htmltools)
library(mapview) #namespace ‘htmltools’ 0.5.3 is already loaded, but >= 0.5.4 is required
install.packages("htmltools", dependencies = TRUE)
install.packages("htmltools", dependencies = TRUE)
install.packages("htmltools", dependencies = TRUE)
# Set Up
## 1. load Libraries
library(sf)
library(tidyverse)
library(htmltools)
library(mapview) #namespace ‘htmltools’ 0.5.3 is already loaded, but >= 0.5.4 is required
detach("package:htmltools", unload = TRUE)
# Set Up
## 1. load Libraries
install.packages("crosstalk")
library(sf)
library(tidyverse)
library(htmltools)
library(mapview) #namespace ‘htmltools’ 0.5.3 is already loaded, but >= 0.5.4 is required
install.packages("crosstalk")
# Set Up
## 1. load Libraries
library(sf)
library(tidyverse)
library(htmltools)
library(mapview) #namespace ‘htmltools’ 0.5.3 is already loaded, but >= 0.5.4 is required
detach("package:crosstalk", unload = TRUE)
detach("crosstalk", unload = TRUE)
# Set Up
## 1. load Libraries
library(sf)
library(tidyverse)
library(htmltools)
library(mapview) #namespace ‘htmltools’ 0.5.3 is already loaded, but >= 0.5.4 is required
detach("package:htmltools", unload = TRUE)
detach("package:crosstalk", unload = TRUE)
install.packages("htmltools")
install.packages("htmltools")
# Set Up
## 1. load Libraries
library(sf)
library(tidyverse)
library(htmltools)
library(mapview) #namespace ‘htmltools’ 0.5.3 is already loaded, but >= 0.5.4 is required
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
